{"ast":null,"code":"import { orderActions } from './order-slice';\nimport { orderListActions } from './ordeliat-slice';\nimport { useSelector } from 'react-redux';\nimport classes from '../components/Meals/AvailableMeals.module.css';\nexport const ShowOrders = () => {\n  return async dispatch => {\n    const fetchOrder = async () => {\n      const response = await fetch('https://food-ordering-app-700fa-default-rtdb.firebaseio.com/orders.json');\n\n      if (!response.ok) {\n        throw new Error('Could not fetch cart data!');\n      }\n\n      const data = await response.json();\n      return data; //console.log(data);\n    };\n\n    try {\n      const orderData = await fetchOrder();\n      console.log(orderData); //dispatch(orderActions.setOrder(orderData));\n      // dispatch(\n      //   cartActions.replaceCart({\n      //     items: cartData.items || [],\n      //     totalQuantity: cartData.totalQuantity,\n      //   })\n      // );\n    } catch (error) {// dispatch(\n      //   uiActions.showNotification({\n      //     status: 'error',\n      //     title: 'Error!',\n      //     message: 'Fetching cart data failed!',\n      //   })\n      // );\n    }\n  };\n}; // export const ShowOrders=()=>{\n//     const loading= useSelector((state)=>state.order.isOrderLoading);\n//     const httperror=useSelector((state)=>state.order.httpError);\n//     const initial=useSelector((state)=>state.order.Initial);\n//     return async(dispatch)=>{\n//         const fetchOrders=async()=>{\n//             const response = await fetch('https://food-ordering-app-700fa-default-rtdb.firebaseio.com/orders.json');\n//             if (!response.ok) {\n//                throw new Error('Something went wrong!');\n//              }\n//              const responseData = await response.json();\n//              const loadedOrder = [];\n//              for (const key in responseData) {\n//                loadedOrder.push({\n//                  id: key,\n//                  name: responseData[key].user.name,\n//                  city: responseData[key].user.city,\n//                  pin: responseData[key].user.postalCode,\n//                  pname:responseData[key].orderedItem[0].name,\n//                  price:responseData[key].orderedItem[0].price,\n//                });\n//                console.log(loadedOrder);\n//                console.log( responseData[key].user.postalCode);\n//              }\n//        console.log(loadedOrder);\n//              dispatch(orderActions.showOrders(loadedOrder));//setMeals(loadedMeals);\n//              dispatch(orderActions.setIsOrderLoading());//setIsLoading(false);\n//            };\n//            fetchOrders().catch((error) => {\n//             dispatch(orderActions.setIsOrderLoading());// setIsLoading(false);\n//             dispatch(orderActions.setHttpError(error.message));//setHttpError(error.message);\n//           });\n//         if (loading) {\n//           return (\n//             <section className={classes.MealsLoading}>\n//               <p>Loading...</p>\n//             </section>\n//           );\n//         }\n//         if (httperror) {\n//           return (\n//             <section className={classes.MealsError}>\n//               <p>{httperror}</p>\n//             </section>\n//           );\n//         }\n//         };\n//     };\n\n_c = ShowOrders;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowOrders\");","map":{"version":3,"sources":["D:/deploy/fudorderingapp/src/store/order-actions.js"],"names":["orderActions","orderListActions","useSelector","classes","ShowOrders","dispatch","fetchOrder","response","fetch","ok","Error","data","json","orderData","console","log","error"],"mappings":"AAEA,SAAQA,YAAR,QAA2B,eAA3B;AACA,SAAQC,gBAAR,QAA+B,kBAA/B;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,+CAApB;AAIA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,UAAU,GAAG,YAAY;AAC7B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,yEAD0B,CAA5B;;AAIA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEA,aAAOD,IAAP,CAX6B,CAY7B;AACD,KAbD;;AAeA,QAAI;AACF,YAAME,SAAS,GAAG,MAAMP,UAAU,EAAlC;AACNQ,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAFQ,CAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAVD,CAUE,OAAOG,KAAP,EAAc,CACd;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,GAnCD;AAoCD,CArCM,C,CAwCP;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;KAhGaZ,U","sourcesContent":["\r\n\r\nimport {orderActions} from './order-slice';\r\nimport {orderListActions} from './ordeliat-slice';\r\nimport {useSelector} from 'react-redux';\r\nimport classes from '../components/Meals/AvailableMeals.module.css';\r\n\r\n\r\n\r\nexport const ShowOrders = () => {\r\n  return async (dispatch) => {\r\n    const fetchOrder = async () => {\r\n      const response = await fetch(\r\n        'https://food-ordering-app-700fa-default-rtdb.firebaseio.com/orders.json'\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Could not fetch cart data!');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n      //console.log(data);\r\n    };\r\n\r\n    try {\r\n      const orderData = await fetchOrder();\r\nconsole.log(orderData);\r\n      //dispatch(orderActions.setOrder(orderData));\r\n      // dispatch(\r\n      //   cartActions.replaceCart({\r\n      //     items: cartData.items || [],\r\n      //     totalQuantity: cartData.totalQuantity,\r\n      //   })\r\n      // );\r\n    } catch (error) {\r\n      // dispatch(\r\n      //   uiActions.showNotification({\r\n      //     status: 'error',\r\n      //     title: 'Error!',\r\n      //     message: 'Fetching cart data failed!',\r\n      //   })\r\n      // );\r\n    }\r\n  };\r\n};\r\n\r\n\r\n// export const ShowOrders=()=>{\r\n//     const loading= useSelector((state)=>state.order.isOrderLoading);\r\n//     const httperror=useSelector((state)=>state.order.httpError);\r\n//     const initial=useSelector((state)=>state.order.Initial);\r\n\r\n//     return async(dispatch)=>{\r\n//         const fetchOrders=async()=>{\r\n//             const response = await fetch('https://food-ordering-app-700fa-default-rtdb.firebaseio.com/orders.json');\r\n\r\n//             if (!response.ok) {\r\n//                throw new Error('Something went wrong!');\r\n//              }\r\n       \r\n//              const responseData = await response.json();\r\n       \r\n//              const loadedOrder = [];\r\n       \r\n//              for (const key in responseData) {\r\n//                loadedOrder.push({\r\n//                  id: key,\r\n//                  name: responseData[key].user.name,\r\n//                  city: responseData[key].user.city,\r\n//                  pin: responseData[key].user.postalCode,\r\n//                  pname:responseData[key].orderedItem[0].name,\r\n//                  price:responseData[key].orderedItem[0].price,\r\n//                });\r\n//                console.log(loadedOrder);\r\n//                console.log( responseData[key].user.postalCode);\r\n//              }\r\n//        console.log(loadedOrder);\r\n//              dispatch(orderActions.showOrders(loadedOrder));//setMeals(loadedMeals);\r\n//              dispatch(orderActions.setIsOrderLoading());//setIsLoading(false);\r\n//            };\r\n//            fetchOrders().catch((error) => {\r\n//             dispatch(orderActions.setIsOrderLoading());// setIsLoading(false);\r\n//             dispatch(orderActions.setHttpError(error.message));//setHttpError(error.message);\r\n//           });\r\n        \r\n      \r\n//         if (loading) {\r\n//           return (\r\n//             <section className={classes.MealsLoading}>\r\n//               <p>Loading...</p>\r\n//             </section>\r\n//           );\r\n//         }\r\n      \r\n//         if (httperror) {\r\n//           return (\r\n//             <section className={classes.MealsError}>\r\n//               <p>{httperror}</p>\r\n//             </section>\r\n//           );\r\n//         }\r\n       \r\n//         };\r\n//     };\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}